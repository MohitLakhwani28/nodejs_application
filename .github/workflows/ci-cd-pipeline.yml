# Simplified CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering of destroy job
    inputs:
      action:
        description: 'Select action to perform'
        required: true
        default: 'deploy'
        options:
          - deploy
          - destroy  # Added the destroy option here

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.inputs.action != 'destroy'  # Skip if action is destroy

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image to DockerHub
      - name: Build and push Docker image
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nodejs-web-app:$TIMESTAMP .
          docker push ${{ secrets.DOCKER_USERNAME }}/nodejs-web-app:$TIMESTAMP
          echo "IMAGE_TAG=$TIMESTAMP" >> $GITHUB_ENV  # Save IMAGE_TAG as an environment variable

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.action != 'destroy'  # Skip if action is destroy

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Node.js and install dependencies
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      # Run tests using npx to ensure local Mocha is used
      - name: Run tests
        run: |
          chmod +x node_modules/.bin/mocha
          npx mocha --exit

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.event.inputs.action != 'destroy'  # Skip if action is destroy

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Apply Terraform configuration with image tag
      - name: Terraform Apply
        run: terraform apply -var="image_tag=${{ env.IMAGE_TAG }}" -auto-approve  # Pass the image tag as a variable
        working-directory: ./terraform

  destroy:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'  # Run only when action is destroy
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Destroy Terraform resources
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./terraform
