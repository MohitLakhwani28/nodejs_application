name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering of deploy or destroy job
    inputs:
      action:
        description: 'Select action to perform'
        required: true
        default: 'deploy'
        options:
          - deploy
          - destroy

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action != 'destroy' }}

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4  # Updated to v4 to avoid deprecated Node.js warning

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2.2.0  # No change needed, this will be auto-updated to Node.js 20

      # Build and push Docker image with timestamp tag
      - name: Build and push Docker image
        run: |
          TAG=$(date +%s)  # Use unique timestamp-based tag
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nodejs-web-app:$TAG .
          docker push ${{ secrets.DOCKER_USERNAME }}/nodejs-web-app:$TAG
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV  # Save image tag to GitHub environment

  test:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.inputs.action != 'destroy' }}

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4  # Updated to v4 to avoid deprecated Node.js warning
      
      # Set up Node.js and install dependencies
      - name: Set up Node.js
        uses: actions/setup-node@v3  # Already on v3, compatible with Node.js 20
        with:
          node-version: '20'  # Node.js 20 for compatibility

      - name: Install dependencies
        run: npm install

      # Run tests using npx to ensure local Mocha is used
      - name: Run tests
        run: |
          chmod +x node_modules/.bin/mocha
          npx mocha --exit

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event.inputs.action != 'destroy' }}

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4  # Updated to v4 to avoid deprecated Node.js warning

      # Set up AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # No change needed, this will be auto-updated to Node.js 20

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Apply Terraform configuration with Docker image tag
      - name: Terraform Apply
        run: terraform apply -auto-approve -var="image_tag=${{ env.IMAGE_TAG }}"
        working-directory: ./terraform

  destroy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'destroy' }}

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4  # Updated to v4 to avoid deprecated Node.js warning

      # Set up AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # No change needed, this will be auto-updated to Node.js 20

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Destroy Terraform-managed infrastructure
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./terraform
