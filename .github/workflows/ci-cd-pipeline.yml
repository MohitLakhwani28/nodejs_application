name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering of deploy or destroy job
    inputs:
      action:
        description: 'Select action to perform'
        required: true
        default: 'deploy'
        options:
          - deploy
          - destroy

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.inputs.action != 'destroy'

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image with timestamp tag
      - name: Build and push Docker image
        run: |
          TAG=$(date +%s)  # Use unique timestamp-based tag
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nodejs-web-app:$TAG .
          docker push ${{ secrets.DOCKER_USERNAME }}/nodejs-web-app:$TAG
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV  # Save image tag to GitHub environment

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.action != 'destroy'

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Apply Terraform configuration with Docker image tag
      - name: Terraform Apply
        run: terraform apply -auto-approve -var="image_tag=${{ env.IMAGE_TAG }}"
        working-directory: ./terraform

  destroy:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    
    steps:
      # Set up AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Destroy Terraform-managed infrastructure
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./terraform
